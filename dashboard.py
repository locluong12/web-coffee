import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import calendar
import numpy as np
from streamlit_extras.metric_cards import style_metric_cards

from controller.dashboard_controller import (
    kho_data,    
    hoa_don_data,
    thuc_don_data, 
    khach_hang_data, 
    chi_tiet_hoa_don_data
)

# --- H√†m Sidebar ---
def add_filter_sidebar():
    """T·∫°o sidebar v√† qu·∫£n l√Ω tr·∫°ng th√°i b·ªô l·ªçc."""
    st.subheader("‚öôÔ∏è B·ªô l·ªçc")

    today = datetime.now().date()
    # L·∫•y gi√° tr·ªã m·∫∑c ƒë·ªãnh ho·∫∑c gi√° tr·ªã ƒë√£ l∆∞u trong session state
    default_start = st.session_state.get('date_range_start', today - timedelta(days=30))
    default_end = st.session_state.get('date_range_end', today)
    default_nhan_vien = st.session_state.get('selected_nhan_vien', ["T·∫•t c·∫£"])
    default_loai_hh = st.session_state.get('selected_loai_hh', ["T·∫•t c·∫£"])
    default_loai_kh = st.session_state.get('selected_loai_kh', ["T·∫•t c·∫£"])


    # --- B·ªô l·ªçc th·ªùi gian ---
    with st.expander("üóìÔ∏è Th·ªùi gian", expanded=True):
        date_range_tuple = st.date_input(
            "Ch·ªçn kho·∫£ng th·ªùi gian",
            value=(default_start, default_end),
            min_value=datetime(2020, 1, 1).date(), # Gi·ªõi h·∫°n ng√†y b·∫Øt ƒë·∫ßu t·ªëi thi·ªÉu
            max_value=today,
            key='date_selector' # Key ƒë·ªÉ truy c·∫≠p gi√° tr·ªã n·∫øu c·∫ßn
        )

        # N√∫t t·∫Øt - C·∫≠p nh·∫≠t tr·ª±c ti·∫øp session state v√† rerun
        st.markdown("**Ho·∫∑c trong:**")
        cols_time = st.columns(2)
        if cols_time[0].button("H√¥m nay", use_container_width=True):
            st.session_state['date_range_start'] = today
            st.session_state['date_range_end'] = today
            st.rerun()
        if cols_time[1].button("7 ng√†y", use_container_width=True):
            st.session_state['date_range_start'] = today - timedelta(days=7)
            st.session_state['date_range_end'] = today
            st.rerun()
        cols_time2 = st.columns(2)
        if cols_time2[0].button("30 ng√†y", use_container_width=True):
            st.session_state['date_range_start'] = today - timedelta(days=30)
            st.session_state['date_range_end'] = today
            st.rerun()
        if cols_time2[1].button("NƒÉm nay", use_container_width=True):
            st.session_state['date_range_start'] = datetime(today.year, 1, 1).date()
            st.session_state['date_range_end'] = today
            st.rerun()

        # L∆∞u gi√° tr·ªã t·ª´ date_input v√†o state khi thay ƒë·ªïi (n·∫øu kh√¥ng d√πng n√∫t t·∫Øt)
        # C·∫ßn n√∫t "√Åp d·ª•ng" n·∫øu mu·ªën x√°c nh·∫≠n thay ƒë·ªïi t·ª´ date_input
        if 'date_selector' in st.session_state:
             current_start, current_end = st.session_state['date_selector']
             # Ch·ªâ c·∫≠p nh·∫≠t n·∫øu kh√°c gi√° tr·ªã ƒëang l∆∞u ƒë·ªÉ tr√°nh rerun kh√¥ng c·∫ßn thi·∫øt khi d√πng n√∫t t·∫Øt
             if current_start != st.session_state.get('date_range_start') or current_end != st.session_state.get('date_range_end'):
                 st.session_state['pending_date_range_start'] = current_start
                 st.session_state['pending_date_range_end'] = current_end


    # --- B·ªô l·ªçc kh√°c ---
    selected_nhan_vien_current = default_nhan_vien
    selected_loai_hh_current = default_loai_hh
    selected_loai_kh_current = default_loai_kh

    

    with st.expander("üè∑Ô∏è Lo·∫°i h√†ng h√≥a", expanded=False):
        try:
            df_thuc_don = pd.DataFrame(thuc_don_data())
            if not df_thuc_don.empty and 'TenLoaiHH' in df_thuc_don.columns:
                loai_hh_options = ["T·∫•t c·∫£"] + sorted(df_thuc_don["TenLoaiHH"].unique().tolist())
                selected_loai_hh_current = st.multiselect("Ch·ªçn lo·∫°i h√†ng h√≥a", loai_hh_options, default=default_loai_hh, key='ms_loaihh')
            else:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu lo·∫°i h√†ng h√≥a.")
        except Exception as e:
            st.error(f"L·ªói t·∫£i d·ªØ li·ªáu lo·∫°i h√†ng h√≥a: {e}")

    with st.expander("üë• Lo·∫°i kh√°ch h√†ng", expanded=False):
        try:
            df_khach_hang = pd.DataFrame(khach_hang_data())
            if not df_khach_hang.empty and 'TenLoaiKH' in df_khach_hang.columns:
                # ƒê·∫£m b·∫£o x·ª≠ l√Ω NaN th√†nh 'Ch∆∞a ph√¢n lo·∫°i' ho·∫∑c lo·∫°i b·ªè n·∫øu c·∫ßn
                df_khach_hang['TenLoaiKH'] = df_khach_hang['TenLoaiKH'].fillna('Ch∆∞a ph√¢n lo·∫°i')
                loai_kh_options = ["T·∫•t c·∫£"] + sorted(df_khach_hang["TenLoaiKH"].unique().tolist())
                selected_loai_kh_current = st.multiselect("Ch·ªçn lo·∫°i kh√°ch h√†ng", loai_kh_options, default=default_loai_kh, key='ms_loaikh')
            else:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu lo·∫°i kh√°ch h√†ng.")
        except Exception as e:
            st.error(f"L·ªói t·∫£i d·ªØ li·ªáu lo·∫°i kh√°ch h√†ng: {e}")

    # --- N√∫t √Åp d·ª•ng v√† X√≥a ---
    col_apply, col_clear = st.columns(2)

    apply_pressed = col_apply.button("‚úÖ √Åp d·ª•ng", type="primary", use_container_width=True)
    clear_pressed = col_clear.button("‚ùå X√≥a", use_container_width=True)

    if apply_pressed:
        # L∆∞u c√°c gi√° tr·ªã ƒëang ch·ªù (n·∫øu c√≥) ho·∫∑c gi√° tr·ªã hi·ªán t·∫°i c·ªßa multiselect
        st.session_state['date_range_start'] = st.session_state.get('pending_date_range_start', default_start)
        st.session_state['date_range_end'] = st.session_state.get('pending_date_range_end', default_end)
        st.session_state['selected_nhan_vien'] = selected_nhan_vien_current
        st.session_state['selected_loai_hh'] = selected_loai_hh_current
        st.session_state['selected_loai_kh'] = selected_loai_kh_current
        # X√≥a gi√° tr·ªã pending sau khi √°p d·ª•ng
        if 'pending_date_range_start' in st.session_state: del st.session_state['pending_date_range_start']
        if 'pending_date_range_end' in st.session_state: del st.session_state['pending_date_range_end']
        st.success("ƒê√£ √°p d·ª•ng b·ªô l·ªçc!")
        st.rerun() # Rerun ƒë·ªÉ dashboard c·∫≠p nh·∫≠t

    if clear_pressed:
        keys_to_delete = ['date_range_start', 'date_range_end',
                          'selected_nhan_vien', 'selected_loai_hh', 'selected_loai_kh',
                          'pending_date_range_start', 'pending_date_range_end']
        for key in keys_to_delete:
            if key in st.session_state:
                del st.session_state[key]
        st.info("ƒê√£ x√≥a t·∫•t c·∫£ b·ªô l·ªçc!")
        st.rerun() # Rerun ƒë·ªÉ reset v·ªÅ m·∫∑c ƒë·ªãnh

    # Tr·∫£ v·ªÅ c√°c gi√° tr·ªã b·ªô l·ªçc ƒëang ƒë∆∞·ª£c √°p d·ª•ng t·ª´ session_state
    filters = {
        'date_range': (
            st.session_state.get('date_range_start', today - timedelta(days=30)),
            st.session_state.get('date_range_end', today)
        ),
        'selected_nhan_vien': st.session_state.get('selected_nhan_vien', ["T·∫•t c·∫£"]),
        'selected_loai_hh': st.session_state.get('selected_loai_hh', ["T·∫•t c·∫£"]),
        'selected_loai_kh': st.session_state.get('selected_loai_kh', ["T·∫•t c·∫£"])
    }
    return filters

# --- H√†m Dashboard Ch√≠nh ---
def dashboard():
    col1, col2 = st.columns([5, 1])
    with col2:
        # Th√™m sidebar b·ªô l·ªçc v√† l·∫•y gi√° tr·ªã l·ªçc ƒë√£ √°p d·ª•ng
        filters = add_filter_sidebar()

    with col1:
        st.subheader("üìä T·ªïng quan ho·∫°t ƒë·ªông b√°n h√†ng")

        # S·ª≠ d·ª•ng c√°c b·ªô l·ªçc ƒë√£ ch·ªçn t·ª´ session_state
        start_date, end_date = filters['date_range']
        selected_nhan_vien = filters['selected_nhan_vien']
        selected_loai_hh = filters['selected_loai_hh']
        selected_loai_kh = filters['selected_loai_kh']

        # Hi·ªÉn th·ªã th√¥ng tin b·ªô l·ªçc ƒëang √°p d·ª•ng
        filter_info = f"D·ªØ li·ªáu t·ª´ **{start_date.strftime('%d/%m/%Y')}** ƒë·∫øn **{end_date.strftime('%d/%m/%Y')}**"
        active_filters = []
        if selected_nhan_vien != ["T·∫•t c·∫£"]: active_filters.append(f"NV: {', '.join(selected_nhan_vien)}")
        if selected_loai_hh != ["T·∫•t c·∫£"]: active_filters.append(f"Lo·∫°i HH: {', '.join(selected_loai_hh)}")
        if selected_loai_kh != ["T·∫•t c·∫£"]: active_filters.append(f"Lo·∫°i KH: {', '.join(selected_loai_kh)}")

        if active_filters:
            filter_info += " | L·ªçc theo: " + " | ".join(active_filters)
        st.info(filter_info)

        # --- T·∫£i v√† chu·∫©n b·ªã d·ªØ li·ªáu ---
        try:
            # T·∫£i d·ªØ li·ªáu g·ªëc
            df_hoa_don_raw = pd.DataFrame(hoa_don_data())
            df_chi_tiet_raw = pd.DataFrame(chi_tiet_hoa_don_data())
            df_thuc_don_raw = pd.DataFrame(thuc_don_data()) # ƒê√£ c√≥ TenLoaiHH
            df_khach_hang_raw = pd.DataFrame(khach_hang_data()) # ƒê√£ c√≥ TenLoaiKH
            df_kho_raw = pd.DataFrame(kho_data())

            # Ki·ªÉm tra d·ªØ li·ªáu h√≥a ƒë∆°n c∆° b·∫£n
            if df_hoa_don_raw.empty:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu h√≥a ƒë∆°n ƒë·ªÉ hi·ªÉn th·ªã.")
                return # D·ª´ng th·ª±c thi n·∫øu kh√¥ng c√≥ h√≥a ƒë∆°n

            # --- Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu quan tr·ªçng ---
            df_hoa_don_raw['NgayLap'] = pd.to_datetime(df_hoa_don_raw['NgayLap']).dt.date
            df_hoa_don_raw['TongTien'] = pd.to_numeric(df_hoa_don_raw['TongTien'], errors='coerce').fillna(0)
            if not df_chi_tiet_raw.empty:
                df_chi_tiet_raw['ThanhTien'] = pd.to_numeric(df_chi_tiet_raw['ThanhTien'], errors='coerce').fillna(0)
                df_chi_tiet_raw['SoLuongBan'] = pd.to_numeric(df_chi_tiet_raw['SoLuongBan'], errors='coerce').fillna(0)

            # --- √Åp d·ª•ng b·ªô l·ªçc ---
            # B·∫Øt ƒë·∫ßu v·ªõi b·∫£n sao c·ªßa d·ªØ li·ªáu g·ªëc
            df_hoa_don_filtered = df_hoa_don_raw.copy()

            # Chuy·ªÉn ƒë·ªïi c·ªôt 'NgayLap' sang ki·ªÉu datetime, x·ª≠ l√Ω l·ªói n·∫øu c√≥
            df_hoa_don_filtered["NgayLap"] = pd.to_datetime(df_hoa_don_filtered["NgayLap"], errors='raise')

            # Chuy·ªÉn ƒë·ªïi start_date v√† end_date sang ki·ªÉu datetime n·∫øu c·∫ßn
            start_date = pd.to_datetime(start_date)
            end_date = pd.to_datetime(end_date)

            # T·∫°o mask l·ªçc theo ng√†y
            mask_date = (df_hoa_don_filtered['NgayLap'] >= start_date) & (df_hoa_don_filtered['NgayLap'] <= end_date)
            df_hoa_don_filtered = df_hoa_don_filtered[mask_date]

            # Ki·ªÉm tra n·∫øu c√≤n d·ªØ li·ªáu sau l·ªçc ng√†y
            if df_hoa_don_filtered.empty:
                st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu h√≥a ƒë∆°n trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn.")
                return

            

            # 3. L·ªçc theo lo·∫°i kh√°ch h√†ng (tr√™n df_hoa_don_filtered)
            if selected_loai_kh != ["T·∫•t c·∫£"]:
                # D·ªØ li·ªáu hoa_don_data ƒë√£ join s·∫µn TenLoaiKH (ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a NaN th√†nh 'Ch∆∞a ph√¢n lo·∫°i')
                if 'TenLoaiKH' in df_hoa_don_filtered.columns:
                    df_hoa_don_filtered['TenLoaiKH'] = df_hoa_don_filtered['TenLoaiKH'].fillna('Ch∆∞a ph√¢n lo·∫°i')
                    df_hoa_don_filtered = df_hoa_don_filtered[df_hoa_don_filtered['TenLoaiKH'].isin(selected_loai_kh)]
                else:
                    st.error("Thi·∫øu c·ªôt 'TenLoaiKH' trong d·ªØ li·ªáu h√≥a ƒë∆°n ƒë·ªÉ l·ªçc.")


            # 4. L·ªçc theo lo·∫°i h√†ng h√≥a (·∫£nh h∆∞·ªüng ƒë·∫øn h√≥a ƒë∆°n n√†o ƒë∆∞·ª£c gi·ªØ l·∫°i)
            if selected_loai_hh != ["T·∫•t c·∫£"]:
                if not df_chi_tiet_raw.empty and 'MaHH' in df_chi_tiet_raw.columns and 'MaHD' in df_chi_tiet_raw.columns and not df_thuc_don_raw.empty and 'MaHH' in df_thuc_don_raw.columns and 'TenLoaiHH' in df_thuc_don_raw.columns:
                    # L·∫•y MaHH t∆∞∆°ng ·ª©ng v·ªõi TenLoaiHH ƒë√£ ch·ªçn
                    selected_mahh = df_thuc_don_raw[df_thuc_don_raw['TenLoaiHH'].isin(selected_loai_hh)]['MaHH'].unique()
                    # L·∫•y MaHD ch·ª©a c√°c MaHH n√†y t·ª´ chi ti·∫øt h√≥a ƒë∆°n g·ªëc
                    hd_ids_contain_selected_hh = df_chi_tiet_raw[df_chi_tiet_raw['MaHH'].isin(selected_mahh)]['MaHD'].unique()
                    # L·ªçc df_hoa_don_filtered ƒë·ªÉ ch·ªâ gi·ªØ l·∫°i c√°c h√≥a ƒë∆°n th·ªèa m√£n
                    df_hoa_don_filtered = df_hoa_don_filtered[df_hoa_don_filtered['MaHD'].isin(hd_ids_contain_selected_hh)]
                else:
                    st.error("Thi·∫øu d·ªØ li·ªáu ho·∫∑c c·ªôt c·∫ßn thi·∫øt (Chi ti·∫øt Hƒê, Th·ª±c ƒë∆°n) ƒë·ªÉ l·ªçc theo Lo·∫°i h√†ng h√≥a.")


            # --- T·∫°o df_merged_final SAU KHI ƒë√£ l·ªçc df_hoa_don_filtered ---
            # df_merged_final ch·ªâ ch·ª©a c√°c chi ti·∫øt thu·ªôc c√°c h√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c l·ªçc ho√†n ch·ªânh
            if not df_chi_tiet_raw.empty and not df_hoa_don_filtered.empty:
                df_merged_final = pd.merge(
                    df_chi_tiet_raw,
                    df_hoa_don_filtered[['MaHD']], # Ch·ªâ c·∫ßn merge theo MaHD c·ªßa c√°c h√≥a ƒë∆°n ƒë√£ l·ªçc
                    on='MaHD',
                    how='inner' # Ch·ªâ gi·ªØ l·∫°i chi ti·∫øt c·ªßa h√≥a ƒë∆°n ƒë√£ l·ªçc
                )
                # Merge th√™m th√¥ng tin c·∫ßn thi·∫øt t·ª´ df_thuc_don_raw n·∫øu ch∆∞a c√≥ trong df_chi_tiet_raw
                if 'TenHH' not in df_merged_final.columns or 'TenLoaiHH' not in df_merged_final.columns:
                    df_merged_final = pd.merge(df_merged_final, df_thuc_don_raw[['MaHH', 'TenHH', 'TenLoaiHH']], on='MaHH', how='left')
            else:
                df_merged_final = pd.DataFrame() # T·∫°o DataFrame r·ªóng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu

            # Ki·ªÉm tra l·∫ßn cu·ªëi n·∫øu df_hoa_don_filtered c√≤n d·ªØ li·ªáu sau t·∫•t c·∫£ b·ªô l·ªçc
            if df_hoa_don_filtered.empty:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi t·∫•t c·∫£ c√°c b·ªô l·ªçc ƒë√£ ch·ªçn.")
                return

            # --- T√≠nh to√°n KPIs ---
            total_revenue = df_hoa_don_filtered['TongTien'].sum()
            total_orders = len(df_hoa_don_filtered)
            # ƒê·∫øm kh√°ch h√†ng duy nh·∫•t t·ª´ h√≥a ƒë∆°n ƒë√£ l·ªçc, lo·∫°i b·ªè kh√°ch l·∫ª n·∫øu c√≥ m√£ KH null/r·ªóng
            unique_customers = df_hoa_don_filtered['MaKhachHang'].nunique() if 'MaKhachHang' in df_hoa_don_filtered.columns else 0


            # T√¨m s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t (d·ª±a tr√™n df_merged_final)
            best_product = "Kh√¥ng c√≥ d·ªØ li·ªáu"
            if not df_merged_final.empty and 'SoLuongBan' in df_merged_final.columns and 'TenHH' in df_merged_final.columns:
                product_sales = df_merged_final.groupby(['MaHH', 'TenHH'])['SoLuongBan'].sum().reset_index()
                if not product_sales.empty:
                    best_selling_item = product_sales.loc[product_sales['SoLuongBan'].idxmax()]
                    best_product = f"{best_selling_item['TenHH']} ({int(best_selling_item['SoLuongBan'])} SP)"


            # --- H√ÄNG 1: KPI Cards ---
            kpi_cols = st.columns(4)
            kpi_cols[0].metric("T·ªïng doanh thu", f"{total_revenue:,.0f} ƒë")
            kpi_cols[1].metric("S·ªë h√≥a ƒë∆°n", f"{total_orders}")
            kpi_cols[2].metric("S·ªë kh√°ch h√†ng", f"{unique_customers}")
            kpi_cols[3].metric("SP b√°n ch·∫°y nh·∫•t", best_product)
            style_metric_cards(border_left_color="#1976D2") # Th√™m style cho ƒë·∫πp
            
            import plotly.graph_objects as go
            import plotly.express as px
            

            # Gi·∫£ s·ª≠ b·∫°n ƒë√£ x·ª≠ l√Ω d·ªØ li·ªáu nh∆∞ tr∆∞·ªõc
            df_hoa_don_filtered['NgayLap'] = pd.to_datetime(df_hoa_don_filtered['NgayLap']).dt.date

            daily_revenue = df_hoa_don_filtered.groupby('NgayLap').agg(
                DoanhThu=('TongTien', 'sum')
            ).reset_index()

            if 'df_merged_final' in locals() and not df_merged_final.empty:

                # ƒê·ªïi t√™n c√°c c·ªôt ƒë·ªÉ ƒë·ªìng b·ªô h√≥a d·ªØ li·ªáu
                df_temp = df_merged_final.rename(columns={'S·∫£n ph·∫©m': 'MaHH', 'S·ªë l∆∞·ª£ng': 'SoLuongBan'})

               # ===================== BI·ªÇU ƒê·ªí 1: Doanh thu theo ng√†y =====================
            if 'daily_revenue' in locals() and not daily_revenue.empty:
                # L·ªçc nh·ªØng ng√†y c√≥ doanh thu kh√°c 0
                daily_revenue = daily_revenue[daily_revenue['DoanhThu'] > 0]

                if not daily_revenue.empty:
                    fig_revenue_day = go.Figure()

                    fig_revenue_day.add_trace(go.Bar(
                        x=daily_revenue['NgayLap'],
                        y=daily_revenue['DoanhThu'],
                        marker=dict(color='#023468'),
                        hovertemplate='<b>Ng√†y:</b> %{x|%d/%m/%Y}<br><b>Doanh thu:</b> %{y:,.0f} ƒë<extra></extra>',
                    ))

                    fig_revenue_day.update_layout(
                        title={
                            'text': 'Doanh thu b√°n h√†ng theo ng√†y',
                            'x': 0.5,
                            'xanchor': 'center'
                        },
                        title_font=dict(size=20, color='black', family='Arial'),
                        xaxis=dict(
                            title='Ng√†y',
                            tickformat='%d/%m/%Y',
                            tickangle=45,
                            type='category',  # ƒê·∫£m b·∫£o hi·ªÉn th·ªã to√†n b·ªô c√°c ng√†y theo th·ª© t·ª±
                            tickmode='linear',
                            tickfont=dict(size=10),
                        ),
                        yaxis=dict(title='Doanh thu (VNƒê)', tickformat=',.0f'),
                        plot_bgcolor='white',
                        paper_bgcolor='white',
                        font=dict(color='black', family='Arial'),
                        height=500,
                        bargap=0.6,
                        showlegend=False
                    )

                    st.plotly_chart(fig_revenue_day, use_container_width=True)
                else:
                    st.info("Kh√¥ng c√≥ doanh thu n√†o ƒë·ªÉ hi·ªÉn th·ªã.")


                      
                # ===================== CHIA GIAO DI·ªÜN L√ÄM 2 C·ªòT NGANG =====================
                col1, spacer, col2 = st.columns([1, 0.1, 1])  # C·ªôt gi·ªØa ƒë·ªÉ t·∫°o kho·∫£ng c√°ch

                # T·∫°o 2 c·ªôt ngang
            col1, col2 = st.columns(2)

            # ===================== BI·ªÇU ƒê·ªí 1: TOP 10 s·∫£n ph·∫©m b√°n ch·∫°y =====================
            with col1:
                tenhh_col = 'TenHH_x' if 'TenHH_x' in df_temp.columns else 'TenHH_y' if 'TenHH_y' in df_temp.columns else None
                if tenhh_col and {'SoLuongBan', tenhh_col}.issubset(df_temp.columns):
                    top10 = df_temp.groupby(tenhh_col)['SoLuongBan'].sum().reset_index()
                    top10 = top10.sort_values(by='SoLuongBan', ascending=False).head(10)

                    fig_top10 = px.bar(
                        top10.sort_values('SoLuongBan'),
                        x='SoLuongBan',
                        y=tenhh_col,
                        orientation='h',
                        text='SoLuongBan',
                        labels={tenhh_col: 'T√™n h√†ng h√≥a', 'SoLuongBan': 'S·ªë l∆∞·ª£ng b√°n'},
                        height=500,  # ‚úÖ Chi·ªÅu cao b·∫±ng v·ªõi pie chart
                        color_discrete_sequence=['#023468']
                    )

                    fig_top10.update_traces(
                        texttemplate='%{text}',
                        textposition='outside',
                        marker=dict(line=dict(color='black', width=1)),
                        opacity=0.9
                    )

                    fig_top10.update_layout(
                        title={
                            'text': 'TOP 10 S·∫¢N PH·∫®M B√ÅN CH·∫†Y NH·∫§T',
                            'x': 0.5,
                            'xanchor': 'center'
                        },
                        title_font=dict(size=18, color='black', family='Arial'),
                        plot_bgcolor='white',
                        paper_bgcolor='white',
                        font=dict(color='black', family='Arial', size=10),
                        showlegend=False,
                        margin=dict(t=60, b=30, l=30, r=30)  # ‚úÖ Kho·∫£ng c√°ch ƒë·ªÅu
                    )

                    st.plotly_chart(fig_top10, use_container_width=True)
                else:
                    st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì.")

            # ===================== BI·ªÇU ƒê·ªí 2: Doanh thu theo lo·∫°i h√†ng h√≥a =====================
            with col2:
                if {'TenLoaiHH', 'ThanhTien'}.issubset(df_merged_final.columns):
                    df_temp_doanhthu = df_merged_final[['TenLoaiHH', 'ThanhTien']]
                    doanh_thu_loai = df_temp_doanhthu.groupby('TenLoaiHH')['ThanhTien'].sum().reset_index()
                    doanh_thu_loai = doanh_thu_loai.sort_values(by='ThanhTien', ascending=False)

                    fig_pie = px.pie(
                        doanh_thu_loai,
                        names='TenLoaiHH',
                        values='ThanhTien',
                        height=500,  # ‚úÖ Chi·ªÅu cao b·∫±ng bar chart
                        color_discrete_sequence=px.colors.sequential.Blues[::-1]
                    )

                    fig_pie.update_traces(
                        textposition='inside',
                        textinfo='percent+label'
                    )

                    fig_pie.update_layout(
                        title={
                            'text': 'DOANH THU B√ÅN H√ÄNG THEO LO·∫†I H√ÄNG HO√Å',
                            'x': 0.5,
                            'xanchor': 'center'
                        },
                        title_font=dict(size=18, color='black', family='Arial'),
                        font=dict(color='black', family='Arial', size=10),
                        paper_bgcolor='white',
                        plot_bgcolor='white',
                        showlegend=True,
                        margin=dict(t=60, b=30, l=30, r=30)  # ‚úÖ Kho·∫£ng c√°ch ƒë·ªÅu
                    )

                    st.plotly_chart(fig_pie, use_container_width=True)
                else:
                    st.info("Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã doanh thu theo lo·∫°i h√†ng h√≥a.")




            import plotly.express as px

            # Gi·∫£ s·ª≠ df_kho_raw ƒë√£ ƒë∆∞·ª£c load tr∆∞·ªõc ƒë√≥
            if not df_kho_raw.empty:
                st.markdown(
                    "<h3 style='text-align: center; color: Black; font-weight: bold;'>BI·ªÇU ƒê·ªí TI√äU TH·ª§ V√Ä T·ªíN KHO NGUY√äN LI·ªÜU ƒê√É B√ÅN</h3>",
                    unsafe_allow_html=True
                )

                # T√≠nh to√°n
                stock_items = df_kho_raw[['MaNL', 'TenNL', 'SoLuongBanDau', 'SoLuong', 'DonViTinh']].copy()
                stock_items['SoLuongBanDau'] = pd.to_numeric(stock_items['SoLuongBanDau'], errors='coerce').fillna(0)
                stock_items['SoLuong'] = pd.to_numeric(stock_items['SoLuong'], errors='coerce').fillna(0)
                stock_items['TieuThu'] = stock_items['SoLuongBanDau'] - stock_items['SoLuong']
                stock_items_sold = stock_items[stock_items['TieuThu'] > 0]

                if not stock_items_sold.empty:
                    # T√¨m nguy√™n li·ªáu c√≥ l∆∞·ª£ng ti√™u th·ª• v√† t·ªìn kho l·ªõn nh·∫•t v√† nh·ªè nh·∫•t
                    min_tieuthu = stock_items_sold['TieuThu'].min()
                    min_tonkho = stock_items_sold['SoLuong'].min()

                    # L·∫•y danh s√°ch m√†u s·∫Øc t·ª´ px.colors.sequential.Blues
                    color_scale = px.colors.sequential.Blues[::-1]
                    num_colors = len(color_scale)

                    # Bi·ªÉu ƒë·ªì 1: Ti√™u th·ª•
                    fig_consumption = px.bar(
                        stock_items_sold,
                        x='TieuThu',
                        y='TenNL',
                        orientation='h',
                        text=stock_items_sold.apply(lambda row: f"{row['TieuThu']:.0f} {row['DonViTinh']}", axis=1),
                        color='TieuThu',
                        color_continuous_scale=color_scale,
                        height=500,  # TƒÉng chi·ªÅu cao bi·ªÉu ƒë·ªì
                        labels={'TieuThu': 'L∆∞·ª£ng ti√™u th·ª•', 'TenNL': 'Nguy√™n li·ªáu'},
                        template='plotly_white'
                    )

                    # Thay ƒë·ªïi m√†u thanh c√≥ l∆∞·ª£ng ti√™u th·ª• nh·ªè nh·∫•t th√†nh m√†u xanh l√°
                    fig_consumption.data[0].marker.color = [
                        'green' if x == min_tieuthu else color_scale[min(int((x / stock_items_sold['TieuThu'].max()) * (num_colors - 1)), num_colors - 1)]
                        for x in stock_items_sold['TieuThu']
                    ]

                    # ƒê·∫£m b·∫£o vƒÉn b·∫£n n·∫±m ngo√†i thanh ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß
                    fig_consumption.update_traces(textposition='outside', textangle=0)

                    # TƒÉng k√≠ch th∆∞·ªõc v√† c√°c margin ƒë·ªÉ vƒÉn b·∫£n c√≥ ƒë·ªß kh√¥ng gian
                    fig_consumption.update_layout(
                        yaxis_title=None,
                        xaxis_title='L∆∞·ª£ng ti√™u th·ª•',
                        coloraxis_showscale=False,
                        margin=dict(l=10, r=10, t=30, b=50),
                        bargap=0.1,  # Gi·∫£m kho·∫£ng c√°ch gi·ªØa c√°c thanh ƒë·ªÉ ch√∫ng d√†i h∆°n
                        showlegend=False,  # T·∫Øt legend n·∫øu kh√¥ng c·∫ßn thi·∫øt
                        autosize=True,  # T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc bi·ªÉu ƒë·ªì
                        xaxis=dict(tickangle=45),  # Quay nh√£n tr·ª•c x n·∫øu c·∫ßn thi·∫øt
                    )

                    # Bi·ªÉu ƒë·ªì 2: T·ªìn kho
                    fig_stock = px.bar(
                        stock_items_sold,
                        x='SoLuong',
                        y='TenNL',
                        orientation='h',
                        text=stock_items_sold.apply(lambda row: f"{row['SoLuong']:.0f} {row['DonViTinh']}", axis=1),
                        color='SoLuong',
                        color_continuous_scale=color_scale,
                        height=500,  # TƒÉng chi·ªÅu cao bi·ªÉu ƒë·ªì
                        labels={'SoLuong': 'S·ªë l∆∞·ª£ng t·ªìn', 'TenNL': 'Nguy√™n li·ªáu'},
                        template='plotly_white'
                    )

                    # Thay ƒë·ªïi m√†u thanh c√≥ s·ªë l∆∞·ª£ng t·ªìn kho nh·ªè nh·∫•t th√†nh m√†u xanh l√°
                    fig_stock.data[0].marker.color = [
                        'green' if x == min_tonkho else color_scale[min(int((x / stock_items_sold['SoLuong'].max()) * (num_colors - 1)), num_colors - 1)]
                        for x in stock_items_sold['SoLuong']
                    ]

                    # ƒê·∫£m b·∫£o vƒÉn b·∫£n n·∫±m ngo√†i thanh ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß
                    fig_stock.update_traces(textposition='outside', textangle=0)

                    # TƒÉng chi·ªÅu r·ªông c√°c c·ªôt v√† gi·∫£m kho·∫£ng c√°ch gi·ªØa c√°c c·ªôt
                    fig_stock.update_layout(
                        yaxis_title=None,
                        xaxis_title='S·ªë l∆∞·ª£ng t·ªìn',
                        coloraxis_showscale=False,
                        margin=dict(l=10, r=10, t=30, b=50),
                        bargap=0.1,  # Gi·∫£m kho·∫£ng c√°ch gi·ªØa c√°c thanh ƒë·ªÉ ch√∫ng d√†i h∆°n
                        bargroupgap=0.1,  # T·∫°o kho·∫£ng c√°ch nh·ªè gi·ªØa c√°c nh√≥m c·ªôt
                        showlegend=False,
                        autosize=True,  # T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc bi·ªÉu ƒë·ªì
                        xaxis=dict(tickangle=45),  # Quay nh√£n tr·ª•c x n·∫øu c·∫ßn thi·∫øt
                    )

                    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ti√™u th·ª•
                    st.markdown("<h4 style='text-align: center; color: black; font-weight: bold;'>S·ªë l∆∞·ª£ng ti√™u th·ª•</h4>", unsafe_allow_html=True)
                    st.plotly_chart(fig_consumption, use_container_width=True)

                    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì t·ªìn kho
                    st.markdown("<h4 style='text-align: center; color: black; font-weight: bold;'>S·ªë l∆∞·ª£ng t·ªìn kho</h4>", unsafe_allow_html=True)
                    st.plotly_chart(fig_stock, use_container_width=True)

                else:
                    st.info("Kh√¥ng c√≥ nguy√™n li·ªáu ƒë√£ ƒë∆∞·ª£c b√°n.")
            else:
                st.info("Kh√¥ng c√≥ d·ªØ li·ªáu nguy√™n li·ªáu.")

            # --- H√ÄNG 6: Qu·∫£n l√Ω kho ---
            
            if not df_kho_raw.empty:
                

                # C·∫£nh b√°o nguy√™n li·ªáu s·∫Øp h·∫øt
                st.markdown("##### ‚ö†Ô∏è C·∫£nh b√°o Nguy√™n li·ªáu s·∫Øp h·∫øt (<= 10 ƒë∆°n v·ªã)")
                low_stock_threshold = 10
                low_stock = df_kho_raw[pd.to_numeric(df_kho_raw['SoLuong'], errors='coerce').fillna(0) <= low_stock_threshold].copy()

                if not low_stock.empty:
                    low_stock = low_stock.sort_values('SoLuong')
                    low_stock_display = low_stock[['MaNL', 'TenNL', 'SoLuong', 'DonViTinh']]
                    low_stock_display.columns = ['M√£ NL', 'T√™n nguy√™n li·ªáu', 'S·ªë l∆∞·ª£ng t·ªìn', 'ƒê∆°n v·ªã']
                    st.dataframe(low_stock_display, use_container_width=True, hide_index=True)
                else:
                    st.success(f"‚úÖ Kh√¥ng c√≥ nguy√™n li·ªáu n√†o c√≥ s·ªë l∆∞·ª£ng t·ªìn t·ª´ {low_stock_threshold} tr·ªü xu·ªëng.")
            else:
                st.info("Kh√¥ng c√≥ d·ªØ li·ªáu kho ƒë·ªÉ hi·ªÉn th·ªã.")

        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω ho·∫∑c hi·ªÉn th·ªã dashboard: {str(e)}")
            st.exception(e) # In chi ti·∫øt l·ªói ra console/log n·∫øu c·∫ßn debug
            st.info("Vui l√≤ng ki·ªÉm tra l·∫°i b·ªô l·ªçc ho·∫∑c k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu.")
            import matplotlib.pyplot as plt
            # L·ªçc c√°c s·∫£n ph·∫©m c√≥ s·ªë l∆∞·ª£ng t·ªìn kho d∆∞·ªõi 10
            low_stock_threshold = 10
            low_stock = df_kho_raw[df_kho_raw['SoLuong'] <= low_stock_threshold]

            # V·∫Ω bi·ªÉu ƒë·ªì c·∫£nh b√°o h√†ng t·ªìn kho
            if not low_stock.empty:
                # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt
                plt.figure(figsize=(10, 6))
                plt.bar(low_stock['TenNL'], low_stock['SoLuong'], color='orange')
                
                # Th√™m ti√™u ƒë·ªÅ v√† nh√£n cho bi·ªÉu ƒë·ªì
                plt.title('C·∫£nh b√°o Nguy√™n li·ªáu S·∫Øp H·∫øt (T·ªìn kho <= 10)', fontsize=14)
                plt.xlabel('T√™n Nguy√™n Li·ªáu', fontsize=12)
                plt.ylabel('S·ªë L∆∞·ª£ng T·ªìn Kho', fontsize=12)
                plt.xticks(rotation=45, ha='right')  # Quay t√™n s·∫£n ph·∫©m ƒë·ªÉ d·ªÖ ƒë·ªçc

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
                st.pyplot(plt)

            else:
                st.success(f"‚úÖ Kh√¥ng c√≥ nguy√™n li·ªáu n√†o c√≥ s·ªë l∆∞·ª£ng t·ªìn d∆∞·ªõi {low_stock_threshold}.")